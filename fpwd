#!/usr/bin/node

const { exec } = require('child_process');

const execAsync = cmd => {
  return new Promise((resolve, reject) => {
    exec(cmd, (err, stdout, stderr) => {
      if (err) reject(err)
      if (stderr) console.error(stderr)
      resolve(stdout)
    })
  })
}

const findFocusedChild = (node) => {
  if (node.focused) {
    return node
  } else if (node.nodes) {
    return node.nodes.map(findFocusedChild).find(x => x)
  }
}

const getProcessPwd = async pid => {
  const pwdx = await execAsync(`pwdx ${pid}`)
  return pwdx.split(/\s/)[1]
}

;(async () => {
  const treeJson = await execAsync('swaymsg -t get_tree')
  const tree = JSON.parse(treeJson)
  const focused = findFocusedChild(tree)
  if (!focused || !focused.pid) {
    process.argv.length > 2 && console.log(process.argv[2])
    return
  }

  const psTree = await execAsync(`pstree -Tcpl ${focused.pid}`)
  const psLine = psTree.split('\n')[0]
  const psPids = psLine.match(/.*?\)/g).reverse()
  const psPid = psPids.find(text => !text.includes('pstree') && !text.includes('xclip'))
  const pid = psPid.match(/\((\d+)\)/)[1]

  const pwd = await getProcessPwd(pid)
  console.log(pwd)
})()
